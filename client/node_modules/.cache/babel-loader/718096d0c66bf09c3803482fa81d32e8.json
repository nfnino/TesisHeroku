{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, CHANGE_PASS } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"api/users/register\", userData).then(res => history.push(\"/users\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const changePassword = (userData, history) => dispatch => {\n  console.log(userData);\n  axios.put(\"api/users/profile\", userData).then(res => dispatch(changedPass())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const changedPass = () => {\n  return {\n    type: CHANGE_PASS\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/nifec/Desktop/mern-auth/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","CHANGE_PASS","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","changePassword","console","log","put","changedPass","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,EAIEC,WAJF,QAKO,SALP,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DV,EAAAA,KAAK,CACFW,IADH,CACQ,oBADR,EAC8BH,QAD9B,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM,C,CAWP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC/CV,EAAAA,KAAK,CACFW,IADH,CACQ,iBADR,EAC2BH,QAD3B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACF;AACE,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B,CARW,CASX;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGV,KAdH,CAcSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAfZ;AAoBD,CArBM;AAuBP,OAAO,MAAMO,cAAc,GAAG,CAACnB,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC/DkB,EAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ;AACAR,EAAAA,KAAK,CACJ8B,GADD,CACK,mBADL,EAC0BtB,QAD1B,EAECI,IAFD,CAEMC,GAAG,IAAIH,QAAQ,CAACqB,WAAW,EAAZ,CAFrB,EAGChB,KAHD,CAGOC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJV;AASD,CAXM,C,CAaP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMM,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLd,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAM0B,cAAc,GAAG,MAAM;AAClC,SAAO;AACLf,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAM4B,UAAU,GAAG,MAAMvB,QAAQ,IAAI;AAC1C;AACAa,EAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAjC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n  CHANGE_PASS\r\n} from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"api/users/register\", userData)\r\n    .then(res => history.push(\"/users\")) \r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n    // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\nexport const changePassword = (userData, history) => dispatch => {\r\n  console.log(userData)\r\n  axios\r\n  .put(\"api/users/profile\", userData)\r\n  .then(res => dispatch(changedPass()))\r\n  .catch(err =>\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    })\r\n  );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\nexport const changedPass = () => {\r\n  return {\r\n    type: CHANGE_PASS\r\n  }\r\n}\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}